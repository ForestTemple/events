CREATE TABLE Users (
	uid SERIAL PRIMARY KEY,
	email VARCHAR(50) UNIQUE NOT NULL,
	name VARCHAR(50) NOT NULL,
	hash VARCHAR(256) NOT NULL,
	salt VARCHAR(128) NOT NULL
);

CREATE TABLE Admins (
	uid SERIAL PRIMARY KEY,
	FOREIGN KEY (uid) REFERENCES Users(uid)
		ON DELETE CASCADE
);

CREATE TABLE SuperAdmins (
	uid SERIAL PRIMARY KEY,
	FOREIGN KEY (uid) REFERENCES Users(uid)
		ON DELETE CASCADE
);

CREATE TABLE Events (
	eid SERIAL PRIMARY KEY,
	email VARCHAR(50) NOT NULL,
	name VARCHAR(100) NOT NULL,
	description VARCHAR(100),
	phone VARCHAR(20),
	datestamp DATE
);

CREATE TABLE Events_Private (
	eid SERIAL PRIMARY KEY,
	FOREIGN KEY (eid) REFERENCES Events(eid)
		ON DELETE CASCADE
);

CREATE TABLE RSOs (
	rid SERIAL PRIMARY KEY,
	uid # add me, owner
	name VARCHAR(100)
);

CREATE TABLE Events_RSO (
	eid SERIAL PRIMARY KEY,
	rid INTEGER NOT NULL,
	FOREIGN KEY (eid) REFERENCES Events(eid)
		ON DELETE CASCADE,
	FOREIGN KEY (rid) REFERENCES RSOs(rid)
		ON DELETE CASCADE
);

CREATE TABLE Comments (
	cid SERIAL PRIMARY KEY,
	email VARCHAR(100) NOT NULL,
	text VARCHAR(100) NOT NULL,
	honor INTEGER,
	eid INTEGER NOT NULL,
	datestamp DATE,
	FOREIGN KEY (eid) REFERENCES Events(eid)
		ON DELETE CASCADE
);

CREATE TABLE Universities (
	UNID SERIAL PRIMARY KEY,
	num_students INTEGER,
	name VARCHAR(100),
	description VARCHAR(200)
);

CREATE TABLE Universities_Pictures (
	UNID SERIAL,
	file_path VARCHAR(50) PRIMARY KEY,
	FOREIGN KEY (UNID) REFERENCES Universities(UNID)
		ON DELETE CASCADE
);

CREATE TABLE Locations (
	lid SERIAL PRIMARY KEY,
	latitude REAL NOT NULL,
	longitude REAL NOT NULL,
	name VARCHAR(100)
);

CREATE TABLE Universities_Locations (
	lid INTEGER PRIMARY KEY,
	unid INTEGER NOT NULL,
	FOREIGN KEY (unid) REFERENCES Universities(unid),
	FOREIGN KEY (lid) REFERENCES Locations(lid)
);

CREATE TABLE Events_Locations (
	lid INTEGER PRIMARY KEY,
	eid INTEGER NOT NULL,
	FOREIGN KEY (eid) REFERENCES Events(eid),
	FOREIGN KEY (lid) REFERENCES Locations(lid)
); 
